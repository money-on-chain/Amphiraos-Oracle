{
  "address": "0x823179eDB6C0862f34E9036E0058311cB6F9E175",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "poke",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "compute",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "wat",
          "type": "address"
        }
      ],
      "name": "setPriceFeeder",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "wat",
          "type": "address"
        }
      ],
      "name": "unset",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "indexes",
      "outputs": [
        {
          "name": "",
          "type": "bytes12"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "next",
      "outputs": [
        {
          "name": "",
          "type": "bytes12"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "read",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "peek",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes12"
        }
      ],
      "name": "values",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "min_",
          "type": "uint96"
        }
      ],
      "name": "setMin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "authority_",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "void",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "has",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "pos",
          "type": "bytes12"
        },
        {
          "name": "wat",
          "type": "address"
        }
      ],
      "name": "set",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "pos",
          "type": "bytes12"
        }
      ],
      "name": "unset",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "next_",
          "type": "bytes12"
        }
      ],
      "name": "setNext",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "min",
      "outputs": [
        {
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "LogValue",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "name": "guy",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "foo",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "bar",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "fax",
          "type": "bytes"
        }
      ],
      "name": "LogNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "LogSetAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LogSetOwner",
      "type": "event"
    }
  ],
  "transactionHash": "0x68d654b6f357fffdd5036e6796d0d3503f52fbf0fd8e796204fc02dcf7f970f8",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0x823179eDB6C0862f34E9036E0058311cB6F9E175",
    "transactionIndex": 43,
    "gasUsed": "1396043",
    "logsBloom": "0x
    "blockHash": "0x308e3927b41cfb5576891dd97a092e59f8d8dfeffdc5cf7075a068adf42861f4",
    "transactionHash": "0x68d654b6f357fffdd5036e6796d0d3503f52fbf0fd8e796204fc02dcf7f970f8",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 23684022,
        "transactionHash": "0x68d654b6f357fffdd5036e6796d0d3503f52fbf0fd8e796204fc02dcf7f970f8",
        "address": "0x823179eDB6C0862f34E9036E0058311cB6F9E175",
        "topics": [
          "0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x308e3927b41cfb5576891dd97a092e59f8d8dfeffdc5cf7075a068adf42861f4"
      },
      {
        "transactionIndex": 43,
        "blockNumber": 23684022,
        "transactionHash": "0x68d654b6f357fffdd5036e6796d0d3503f52fbf0fd8e796204fc02dcf7f970f8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000009eb632d0c21e60000000000000000000000000000000000000000000000002296629506d9cf020000000000000000000000000000000000000000000003bcfb39e799ba5467d1000000000000000000000000000000000000000000000000228c7731d9cdad1c0000000000000000000000000000000000000000000003bcfb43d2fce76089b7",
        "logIndex": 131,
        "blockHash": "0x308e3927b41cfb5576891dd97a092e59f8d8dfeffdc5cf7075a068adf42861f4"
      }
    ],
    "blockNumber": 23684022,
    "cumulativeGasUsed": "14542938",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fbdb5830c2a76a42179ec7928eecd3ef",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"poke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compute\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wat\",\"type\":\"address\"}],\"name\":\"setPriceFeeder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wat\",\"type\":\"address\"}],\"name\":\"unset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes12\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"next\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes12\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peek\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes12\"}],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min_\",\"type\":\"uint96\"}],\"name\":\"setMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"void\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"has\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pos\",\"type\":\"bytes12\"},{\"name\":\"wat\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pos\",\"type\":\"bytes12\"}],\"name\":\"unset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"next_\",\"type\":\"bytes12\"}],\"name\":\"setNext\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"LogValue\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/MocMedianizer.sol\":\"MoCMedianizer\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/MocMedianizer.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./medianizer/medianizer.sol\\\";\\n\\ncontract MoCMedianizer is Medianizer {\\n  constructor() public Medianizer() {\\n  }\\n}\",\"keccak256\":\"0xda4cea37f2619c0deebb67b115e1c61986aeecb4fb3cdeadf0b759efdd06d609\"},\"contracts/lib/auth.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\ncontract DSAuthority {\\n    function canCall(\\n        address src, address dst, bytes4 sig\\n    ) public view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority (address indexed authority);\\n    event LogSetOwner     (address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority  public  authority;\\n    address      public  owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_)\\n        public\\n        auth\\n    {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_)\\n        public\\n        auth\\n    {\\n        authority = authority_;\\n        emit LogSetAuthority(authority);\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender, msg.sig));\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(0)) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, this, sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x463b7f4079cb2ea5408126c055e8db13df19786e1e9f7fb20299c3f07d93c6c4\"},\"contracts/lib/math.sol\":{\"content\":\"/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.13;\\n\\ncontract DSMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x <= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x >= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x <= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    // solium-disable-next-line security/no-assign-params\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d3d04a43bf59f4db2a8a0bd8ebec0095ccadae495b652adda3c67b6ff3d797a\"},\"contracts/lib/note.sol\":{\"content\":\"/// note.sol -- the `note' modifier, for logging calls as events\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4   indexed  sig,\\n        address  indexed  guy,\\n        bytes32  indexed  foo,\\n        bytes32  indexed  bar,\\n        uint              wad,\\n        bytes             fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n        }\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb5c051741542c6d33079fee73a3724e12c3ef80abf551e03f0ac0fc780f7f812\"},\"contracts/lib/thing.sol\":{\"content\":\"// thing.sol - `auth` with handy mixins. your things should be DSThings\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\nimport \\\"./auth.sol\\\";\\nimport \\\"./note.sol\\\";\\nimport \\\"./math.sol\\\";\\n\\ncontract DSThing is DSAuth, DSNote, DSMath {\\n\\n    function S(string s) internal pure returns (bytes4) {\\n        return bytes4(keccak256(abi.encodePacked(s)));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x116a7c0d8444b2e352780707e8f3d6a70d0945c2037bc1202423e89a05800115\"},\"contracts/lib/value.sol\":{\"content\":\"/// value.sol - a value is a simple thing, it can be get and set\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\nimport \\\"./thing.sol\\\";\\n\\ncontract DSValue is DSThing {\\n    bool    has;\\n    bytes32 val;\\n    function peek() public view returns (bytes32, bool) {\\n        return (val,has);\\n    }\\n    function read() public view returns (bytes32) {\\n        bytes32 wut; bool haz;\\n        (wut, haz) = peek();\\n        require(haz, \\\"haz-not\\\");\\n        return wut;\\n    }\\n    function poke(bytes32 wut) public note auth {\\n        val = wut;\\n        has = true;\\n    }\\n    function void() public note auth {  // unset the value\\n        has = false;\\n    }\\n}\\n\",\"keccak256\":\"0x3fcffff8359f10abddec8c50afe763e8974d52ac1f3a62d08b012edbb74b3824\"},\"contracts/medianizer/medianizer.sol\":{\"content\":\"/// medianizer.sol - read ds-values and output median\\n\\n// Copyright (C) 2017, 2018  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/value.sol\\\";\\n\\ncontract Medianizer is DSThing {\\n    event LogValue(bytes32 val);\\n\\n    uint128 val;\\n    bool public has;\\n\\n    mapping (bytes12 => address) public values;\\n    mapping (address => bytes12) public indexes;\\n    bytes12 public next = 0x1;\\n    uint96 public min = 0x1;\\n    \\n    function setPriceFeeder(address wat) public auth {\\n        bytes12 nextId = bytes12(uint96(next) + 1);\\n        require(nextId != 0x0);\\n        this.set(next, wat);\\n        next = nextId;\\n    }\\n\\n    function set(bytes12 pos, address wat) public note auth {\\n        require(pos != 0x0);\\n        require(wat == 0 || indexes[wat] == 0);\\n\\n        indexes[values[pos]] = 0x0; // Making sure to remove a possible existing address in that position\\n\\n        if (wat != 0) {\\n            indexes[wat] = pos;\\n        }\\n\\n        values[pos] = wat;\\n    }\\n\\n    function setMin(uint96 min_) public note auth {\\n        require(min_ != 0x0);\\n        min = min_;\\n    }\\n\\n    function setNext(bytes12 next_) public note auth {\\n        require(next_ != 0x0);\\n        next = next_;\\n    }\\n\\n    function unset(bytes12 pos) public auth {\\n        this.set(pos, 0);\\n    }\\n\\n    function unset(address wat) public auth {\\n        this.set(indexes[wat], 0);\\n    }\\n\\n    function void() external auth {\\n        has = false;\\n        // TODO: don't allow poke\\n    }\\n\\n    function poke() external {\\n        (bytes32 val_, bool has_) = compute();\\n        val = uint128(val_);\\n        has = has_;\\n        emit LogValue(val_);\\n    }\\n\\n    function peek() external view returns (bytes32, bool) {\\n        return (bytes32(val), has);\\n    }\\n\\n    function read() external view returns (bytes32) {\\n        require(has);\\n        return bytes32(val);\\n    }\\n\\n    function compute() public view returns (bytes32, bool) {\\n        bytes32[] memory wuts = new bytes32[](uint96(next) - 1);\\n        uint96 ctr = 0;\\n        for (uint96 i = 1; i < uint96(next); i++) {\\n            if (values[bytes12(i)] != 0) {\\n                bytes32 wut;\\n                bool wuz;\\n                (wut, wuz) = DSValue(values[bytes12(i)]).peek();\\n                if (wuz) {\\n                    if (ctr == 0 || wut >= wuts[ctr - 1]) {\\n                        wuts[ctr] = wut;\\n                    } else {\\n                        uint96 j = 0;\\n                        while (wut >= wuts[j]) {\\n                            j++;\\n                        }\\n                        for (uint96 k = ctr; k > j; k--) {\\n                            wuts[k] = wuts[k - 1];\\n                        }\\n                        wuts[j] = wut;\\n                    }\\n                    ctr++;\\n                }\\n            }\\n        }\\n\\n        if (ctr < min) {\\n            return (bytes32(val), false);\\n        }\\n\\n        bytes32 value;\\n        if (ctr % 2 == 0) {\\n            uint128 val1 = uint128(wuts[(ctr / 2) - 1]);\\n            uint128 val2 = uint128(wuts[ctr / 2]);\\n            value = bytes32(wdiv(add(val1, val2), 2 ether));\\n        } else {\\n            value = wuts[(ctr - 1) / 2];\\n        }\\n\\n        return (value, true);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x46f6ae1ec92cd7cf275d0e63360d1b1f0f815ce5a3d700f939c32f43716f84ff\"}},\"version\":1}",
  "bytecode": "0x608060405260058054606060020a60c060020a03196001606060020a0319909116600117166c0100000000000000000000000017905534801561004157600080fd5b5060018054600160a060020a031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26117b88061008f6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313af4035811461011657806318178358146101465780631a43c3381461015b5780631d844c2d146101895780632966d1b9146101b75780632db78d93146101e55780634c8fe5261461024857806357de26a41461025d57806359e02dd714610284578063651dd0de146102995780636ba5ef0d146102fc5780637a9e5e4b146103225780638da5cb5b14610350578063ac4c25b214610365578063b689d5ac1461037a578063beb38b43146103a3578063bf7e214f146103f6578063e0a1fdad1461040b578063f2c5925d14610445578063f88979451461047f575b600080fd5b34801561012257600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff600435166104b5565b005b34801561015257600080fd5b50610144610563565b34801561016757600080fd5b50610170610624565b6040805192835290151560208301528051918290030190f35b34801561019557600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff60043516610b42565b3480156101c357600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff60043516610cdf565b3480156101f157600080fd5b5061021373ffffffffffffffffffffffffffffffffffffffff60043516610def565b604080517fffffffffffffffffffffffff00000000000000000000000000000000000000009092168252519081900360200190f35b34801561025457600080fd5b50610213610e18565b34801561026957600080fd5b50610272610e35565b60408051918252519081900360200190f35b34801561029057600080fd5b50610170610e76565b3480156102a557600080fd5b506102d37fffffffffffffffffffffffff000000000000000000000000000000000000000060043516610ea8565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561030857600080fd5b506101446bffffffffffffffffffffffff60043516610ed0565b34801561032e57600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff60043516610fdd565b34801561035c57600080fd5b506102d3611087565b34801561037157600080fd5b506101446110a3565b34801561038657600080fd5b5061038f611106565b604080519115158252519081900360200190f35b3480156103af57600080fd5b506101447fffffffffffffffffffffffff00000000000000000000000000000000000000006004351660243573ffffffffffffffffffffffffffffffffffffffff16611123565b34801561040257600080fd5b506102d36113bd565b34801561041757600080fd5b506101447fffffffffffffffffffffffff0000000000000000000000000000000000000000600435166113d9565b34801561045157600080fd5b506101447fffffffffffffffffffffffff000000000000000000000000000000000000000060043516611490565b34801561048b57600080fd5b506104946115a9565b604080516bffffffffffffffffffffffff9092168252519081900360200190f35b6104e3336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b15156104ee57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60008061056e610624565b600280547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416177fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000831515021790556040805183815290519294509092507f296ba4ca62c6c21c95e828080cb8aec7481b71390585605300a8a76f9e95b527916020918190039190910190a15050565b600080606060008060008060008060008060006001600560009054906101000a90047401000000000000000000000000000000000000000002740100000000000000000000000000000000000000009004036bffffffffffffffffffffffff166040519080825280602002602001820160405280156106ad578160200160208202803883390190505b50995060009850600197505b60055474010000000000000000000000000000000000000000908102046bffffffffffffffffffffffff90811690891610156109ce577fffffffffffffffffffffffff00000000000000000000000000000000000000007401000000000000000000000000000000000000000089021660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff16156109c3577401000000000000000000000000000000000000000088027fffffffffffffffffffffffff0000000000000000000000000000000000000000166000908152600360205260408082205481517f59e02dd7000000000000000000000000000000000000000000000000000000008152825173ffffffffffffffffffffffffffffffffffffffff909216936359e02dd79360048084019491939192918390030190829087803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b505050506040513d604081101561082e57600080fd5b508051602090910151909750955085156109c3576bffffffffffffffffffffffff8916158061088557508960018a036bffffffffffffffffffffffff1681518110151561087757fe5b602090810290910101518710155b156108b657868a8a6bffffffffffffffffffffffff168151811015156108a757fe5b602090810290910101526109bc565b600094505b89856bffffffffffffffffffffffff168151811015156108d757fe5b6020908102909101015187106108f2576001909401936108bb565b8893505b846bffffffffffffffffffffffff16846bffffffffffffffffffffffff1611156109945789600185036bffffffffffffffffffffffff1681518110151561093957fe5b906020019060200201518a856bffffffffffffffffffffffff1681518110151561095f57fe5b602090810290910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909301926108f6565b868a866bffffffffffffffffffffffff168151811015156109b157fe5b602090810290910101525b6001909801975b6001909701966106b9565b6005546bffffffffffffffffffffffff6c010000000000000000000000009091048116908a161015610a1a576002546fffffffffffffffffffffffffffffffff169b5060009a50610b34565b600189161515610ad05789600160026bffffffffffffffffffffffff8c1604036bffffffffffffffffffffffff16815181101515610a5457fe5b6020908102909101015191508960026bffffffffffffffffffffffff8b16046bffffffffffffffffffffffff16815181101515610a8d57fe5b602090810290910101519050610ac9610abb6fffffffffffffffffffffffffffffffff808516908416611722565b671bc16d674ec80000611732565b9250610b2c565b8960026bffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c0116046bffffffffffffffffffffffff16815181101515610b1f57fe5b9060200190602002015192505b8260019b509b505b505050505050505050509091565b6000610b72336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b1515610b7d57600080fd5b5060055474010000000000000000000000000000000000000000908102819004600101027fffffffffffffffffffffffff000000000000000000000000000000000000000081161515610bcf57600080fd5b600554604080517fbeb38b43000000000000000000000000000000000000000000000000000000008152740100000000000000000000000000000000000000009092027fffffffffffffffffffffffff000000000000000000000000000000000000000016600483015273ffffffffffffffffffffffffffffffffffffffff8416602483015251309163beb38b4391604480830192600092919082900301818387803b158015610c7e57600080fd5b505af1158015610c92573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167401000000000000000000000000000000000000000090940493909317909255505050565b610d0d336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b1515610d1857600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602081905260408083205481517fbeb38b43000000000000000000000000000000000000000000000000000000008152740100000000000000000000000000000000000000009091027fffffffffffffffffffffffff000000000000000000000000000000000000000016928101929092526024820183905251309263beb38b43926044808201939182900301818387803b158015610dd457600080fd5b505af1158015610de8573d6000803e3d6000fd5b5050505050565b600460205260009081526040902054740100000000000000000000000000000000000000000281565b600554740100000000000000000000000000000000000000000281565b600254600090700100000000000000000000000000000000900460ff161515610e5d57600080fd5b506002546fffffffffffffffffffffffffffffffff1690565b6002546fffffffffffffffffffffffffffffffff81169170010000000000000000000000000000000090910460ff1690565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a4610f67336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b1515610f7257600080fd5b6bffffffffffffffffffffffff83161515610f8c57600080fd5b5050600580546bffffffffffffffffffffffff9092166c01000000000000000000000000027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff909216919091179055565b61100b336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b151561101657600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6110d1336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b15156110dc57600080fd5b600280547fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff169055565b600254700100000000000000000000000000000000900460ff1681565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a46111ba336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b15156111c557600080fd5b7fffffffffffffffffffffffff0000000000000000000000000000000000000000841615156111f357600080fd5b73ffffffffffffffffffffffffffffffffffffffff83161580611272575073ffffffffffffffffffffffffffffffffffffffff831660009081526004602052604090205474010000000000000000000000000000000000000000027fffffffffffffffffffffffff000000000000000000000000000000000000000016155b151561127d57600080fd5b7fffffffffffffffffffffffff0000000000000000000000000000000000000000841660009081526003602090815260408083205473ffffffffffffffffffffffffffffffffffffffff9081168452600490925290912080547fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690558316156113665773ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167401000000000000000000000000000000000000000086041790555b50507fffffffffffffffffffffffff00000000000000000000000000000000000000009182166000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff90921691909216179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b611407336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b151561141257600080fd5b604080517fbeb38b430000000000000000000000000000000000000000000000000000000081527fffffffffffffffffffffffff0000000000000000000000000000000000000000831660048201526000602482018190529151309263beb38b43926044808201939182900301818387803b158015610dd457600080fd5b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a4611527336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b151561153257600080fd5b7fffffffffffffffffffffffff00000000000000000000000000000000000000008316151561156057600080fd5b5050600580547fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001674010000000000000000000000000000000000000000909204919091179055565b6005546c0100000000000000000000000090046bffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff83163014156115f55750600161171c565b60015473ffffffffffffffffffffffffffffffffffffffff848116911614156116205750600161171c565b60005473ffffffffffffffffffffffffffffffffffffffff1615156116475750600061171c565b60008054604080517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b1580156116ed57600080fd5b505af1158015611701573d6000803e3d6000fd5b505050506040513d602081101561171757600080fd5b505190505b92915050565b8082018281101561171c57600080fd5b60008161175361174a85670de0b6b3a7640000611764565b60028504611722565b81151561175c57fe5b049392505050565b600081158061178157505080820282828281151561177e57fe5b04145b151561171c57600080fd00a165627a7a72305820c66b80192a0cf8d4dae56c2c08b942defd7ac2e3e8f36d926d3f85e665eba85f0029",
  "deployedBytecode": "0x6080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313af4035811461011657806318178358146101465780631a43c3381461015b5780631d844c2d146101895780632966d1b9146101b75780632db78d93146101e55780634c8fe5261461024857806357de26a41461025d57806359e02dd714610284578063651dd0de146102995780636ba5ef0d146102fc5780637a9e5e4b146103225780638da5cb5b14610350578063ac4c25b214610365578063b689d5ac1461037a578063beb38b43146103a3578063bf7e214f146103f6578063e0a1fdad1461040b578063f2c5925d14610445578063f88979451461047f575b600080fd5b34801561012257600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff600435166104b5565b005b34801561015257600080fd5b50610144610563565b34801561016757600080fd5b50610170610624565b6040805192835290151560208301528051918290030190f35b34801561019557600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff60043516610b42565b3480156101c357600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff60043516610cdf565b3480156101f157600080fd5b5061021373ffffffffffffffffffffffffffffffffffffffff60043516610def565b604080517fffffffffffffffffffffffff00000000000000000000000000000000000000009092168252519081900360200190f35b34801561025457600080fd5b50610213610e18565b34801561026957600080fd5b50610272610e35565b60408051918252519081900360200190f35b34801561029057600080fd5b50610170610e76565b3480156102a557600080fd5b506102d37fffffffffffffffffffffffff000000000000000000000000000000000000000060043516610ea8565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561030857600080fd5b506101446bffffffffffffffffffffffff60043516610ed0565b34801561032e57600080fd5b5061014473ffffffffffffffffffffffffffffffffffffffff60043516610fdd565b34801561035c57600080fd5b506102d3611087565b34801561037157600080fd5b506101446110a3565b34801561038657600080fd5b5061038f611106565b604080519115158252519081900360200190f35b3480156103af57600080fd5b506101447fffffffffffffffffffffffff00000000000000000000000000000000000000006004351660243573ffffffffffffffffffffffffffffffffffffffff16611123565b34801561040257600080fd5b506102d36113bd565b34801561041757600080fd5b506101447fffffffffffffffffffffffff0000000000000000000000000000000000000000600435166113d9565b34801561045157600080fd5b506101447fffffffffffffffffffffffff000000000000000000000000000000000000000060043516611490565b34801561048b57600080fd5b506104946115a9565b604080516bffffffffffffffffffffffff9092168252519081900360200190f35b6104e3336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b15156104ee57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60008061056e610624565b600280547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416177fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000831515021790556040805183815290519294509092507f296ba4ca62c6c21c95e828080cb8aec7481b71390585605300a8a76f9e95b527916020918190039190910190a15050565b600080606060008060008060008060008060006001600560009054906101000a90047401000000000000000000000000000000000000000002740100000000000000000000000000000000000000009004036bffffffffffffffffffffffff166040519080825280602002602001820160405280156106ad578160200160208202803883390190505b50995060009850600197505b60055474010000000000000000000000000000000000000000908102046bffffffffffffffffffffffff90811690891610156109ce577fffffffffffffffffffffffff00000000000000000000000000000000000000007401000000000000000000000000000000000000000089021660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff16156109c3577401000000000000000000000000000000000000000088027fffffffffffffffffffffffff0000000000000000000000000000000000000000166000908152600360205260408082205481517f59e02dd7000000000000000000000000000000000000000000000000000000008152825173ffffffffffffffffffffffffffffffffffffffff909216936359e02dd79360048084019491939192918390030190829087803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b505050506040513d604081101561082e57600080fd5b508051602090910151909750955085156109c3576bffffffffffffffffffffffff8916158061088557508960018a036bffffffffffffffffffffffff1681518110151561087757fe5b602090810290910101518710155b156108b657868a8a6bffffffffffffffffffffffff168151811015156108a757fe5b602090810290910101526109bc565b600094505b89856bffffffffffffffffffffffff168151811015156108d757fe5b6020908102909101015187106108f2576001909401936108bb565b8893505b846bffffffffffffffffffffffff16846bffffffffffffffffffffffff1611156109945789600185036bffffffffffffffffffffffff1681518110151561093957fe5b906020019060200201518a856bffffffffffffffffffffffff1681518110151561095f57fe5b602090810290910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909301926108f6565b868a866bffffffffffffffffffffffff168151811015156109b157fe5b602090810290910101525b6001909801975b6001909701966106b9565b6005546bffffffffffffffffffffffff6c010000000000000000000000009091048116908a161015610a1a576002546fffffffffffffffffffffffffffffffff169b5060009a50610b34565b600189161515610ad05789600160026bffffffffffffffffffffffff8c1604036bffffffffffffffffffffffff16815181101515610a5457fe5b6020908102909101015191508960026bffffffffffffffffffffffff8b16046bffffffffffffffffffffffff16815181101515610a8d57fe5b602090810290910101519050610ac9610abb6fffffffffffffffffffffffffffffffff808516908416611722565b671bc16d674ec80000611732565b9250610b2c565b8960026bffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c0116046bffffffffffffffffffffffff16815181101515610b1f57fe5b9060200190602002015192505b8260019b509b505b505050505050505050509091565b6000610b72336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b1515610b7d57600080fd5b5060055474010000000000000000000000000000000000000000908102819004600101027fffffffffffffffffffffffff000000000000000000000000000000000000000081161515610bcf57600080fd5b600554604080517fbeb38b43000000000000000000000000000000000000000000000000000000008152740100000000000000000000000000000000000000009092027fffffffffffffffffffffffff000000000000000000000000000000000000000016600483015273ffffffffffffffffffffffffffffffffffffffff8416602483015251309163beb38b4391604480830192600092919082900301818387803b158015610c7e57600080fd5b505af1158015610c92573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167401000000000000000000000000000000000000000090940493909317909255505050565b610d0d336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b1515610d1857600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602081905260408083205481517fbeb38b43000000000000000000000000000000000000000000000000000000008152740100000000000000000000000000000000000000009091027fffffffffffffffffffffffff000000000000000000000000000000000000000016928101929092526024820183905251309263beb38b43926044808201939182900301818387803b158015610dd457600080fd5b505af1158015610de8573d6000803e3d6000fd5b5050505050565b600460205260009081526040902054740100000000000000000000000000000000000000000281565b600554740100000000000000000000000000000000000000000281565b600254600090700100000000000000000000000000000000900460ff161515610e5d57600080fd5b506002546fffffffffffffffffffffffffffffffff1690565b6002546fffffffffffffffffffffffffffffffff81169170010000000000000000000000000000000090910460ff1690565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a4610f67336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b1515610f7257600080fd5b6bffffffffffffffffffffffff83161515610f8c57600080fd5b5050600580546bffffffffffffffffffffffff9092166c01000000000000000000000000027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff909216919091179055565b61100b336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b151561101657600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6110d1336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b15156110dc57600080fd5b600280547fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff169055565b600254700100000000000000000000000000000000900460ff1681565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a46111ba336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b15156111c557600080fd5b7fffffffffffffffffffffffff0000000000000000000000000000000000000000841615156111f357600080fd5b73ffffffffffffffffffffffffffffffffffffffff83161580611272575073ffffffffffffffffffffffffffffffffffffffff831660009081526004602052604090205474010000000000000000000000000000000000000000027fffffffffffffffffffffffff000000000000000000000000000000000000000016155b151561127d57600080fd5b7fffffffffffffffffffffffff0000000000000000000000000000000000000000841660009081526003602090815260408083205473ffffffffffffffffffffffffffffffffffffffff9081168452600490925290912080547fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690558316156113665773ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000167401000000000000000000000000000000000000000086041790555b50507fffffffffffffffffffffffff00000000000000000000000000000000000000009182166000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff90921691909216179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b611407336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b151561141257600080fd5b604080517fbeb38b430000000000000000000000000000000000000000000000000000000081527fffffffffffffffffffffffff0000000000000000000000000000000000000000831660048201526000602482018190529151309263beb38b43926044808201939182900301818387803b158015610dd457600080fd5b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a4611527336000357fffffffff00000000000000000000000000000000000000000000000000000000166115cd565b151561153257600080fd5b7fffffffffffffffffffffffff00000000000000000000000000000000000000008316151561156057600080fd5b5050600580547fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001674010000000000000000000000000000000000000000909204919091179055565b6005546c0100000000000000000000000090046bffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff83163014156115f55750600161171c565b60015473ffffffffffffffffffffffffffffffffffffffff848116911614156116205750600161171c565b60005473ffffffffffffffffffffffffffffffffffffffff1615156116475750600061171c565b60008054604080517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b1580156116ed57600080fd5b505af1158015611701573d6000803e3d6000fd5b505050506040513d602081101561171757600080fd5b505190505b92915050565b8082018281101561171c57600080fd5b60008161175361174a85670de0b6b3a7640000611764565b60028504611722565b81151561175c57fe5b049392505050565b600081158061178157505080820282828281151561177e57fe5b04145b151561171c57600080fd00a165627a7a72305820c66b80192a0cf8d4dae56c2c08b942defd7ac2e3e8f36d926d3f85e665eba85f0029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}