{
  "address": "0xB7A335E733Ad214aB4d5d58fdD0BB715d654a511",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFeed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "Created",
      "type": "event"
    }
  ],
  "transactionHash": "0xa6cf4ab854b3671038900f565d370849646ae7bd872d14905ce02e35e533c809",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0xB7A335E733Ad214aB4d5d58fdD0BB715d654a511",
    "transactionIndex": 6,
    "gasUsed": "734978",
    "logsBloom": "0x
    "blockHash": "0xe20754a033f8852bf04c3f8bb2a15bb3085f94d25d760a30f884f556b4a408d3",
    "transactionHash": "0xa6cf4ab854b3671038900f565d370849646ae7bd872d14905ce02e35e533c809",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 23684023,
        "transactionHash": "0xa6cf4ab854b3671038900f565d370849646ae7bd872d14905ce02e35e533c809",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000153073310327caa6abb76f735d115e5c8ba1617b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000538eacc9a25e4000000000000000000000000000000000000000000000000228c7731d8a373020000000000000000000000000000000000000000000003bcfb8a35c8d9810af100000000000000000000000000000000000000000000000022873e470c094d1e0000000000000000000000000000000000000000000003bcfb8f6eb3a61b30d5",
        "logIndex": 23,
        "blockHash": "0xe20754a033f8852bf04c3f8bb2a15bb3085f94d25d760a30f884f556b4a408d3"
      }
    ],
    "blockNumber": 23684023,
    "cumulativeGasUsed": "5718355",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fbdb5830c2a76a42179ec7928eecd3ef",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/price-feed/feed-factory.sol\":\"FeedFactory\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/lib/auth.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\ncontract DSAuthority {\\n    function canCall(\\n        address src, address dst, bytes4 sig\\n    ) public view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority (address indexed authority);\\n    event LogSetOwner     (address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority  public  authority;\\n    address      public  owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_)\\n        public\\n        auth\\n    {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_)\\n        public\\n        auth\\n    {\\n        authority = authority_;\\n        emit LogSetAuthority(authority);\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender, msg.sig));\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(0)) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, this, sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x463b7f4079cb2ea5408126c055e8db13df19786e1e9f7fb20299c3f07d93c6c4\"},\"contracts/lib/math.sol\":{\"content\":\"/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.13;\\n\\ncontract DSMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x <= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x >= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x <= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    // solium-disable-next-line security/no-assign-params\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d3d04a43bf59f4db2a8a0bd8ebec0095ccadae495b652adda3c67b6ff3d797a\"},\"contracts/lib/note.sol\":{\"content\":\"/// note.sol -- the `note' modifier, for logging calls as events\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4   indexed  sig,\\n        address  indexed  guy,\\n        bytes32  indexed  foo,\\n        bytes32  indexed  bar,\\n        uint              wad,\\n        bytes             fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n        }\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb5c051741542c6d33079fee73a3724e12c3ef80abf551e03f0ac0fc780f7f812\"},\"contracts/lib/thing.sol\":{\"content\":\"// thing.sol - `auth` with handy mixins. your things should be DSThings\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\nimport \\\"./auth.sol\\\";\\nimport \\\"./note.sol\\\";\\nimport \\\"./math.sol\\\";\\n\\ncontract DSThing is DSAuth, DSNote, DSMath {\\n\\n    function S(string s) internal pure returns (bytes4) {\\n        return bytes4(keccak256(abi.encodePacked(s)));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x116a7c0d8444b2e352780707e8f3d6a70d0945c2037bc1202423e89a05800115\"},\"contracts/price-feed/feed-factory.sol\":{\"content\":\"/// feed-factory.sol - deploy to create price-feeds\\n\\n// Copyright (C) 2017, 2018  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\nimport \\\"./price-feed.sol\\\";\\n\\ncontract FeedFactory {\\n    event Created(address indexed sender, address feed);\\n    mapping(address=>bool) public isFeed;\\n\\n    function create() public returns (PriceFeed) {\\n        PriceFeed feed = new PriceFeed();\\n        emit Created(msg.sender, address(feed));\\n        feed.setOwner(msg.sender);\\n        isFeed[feed] = true;\\n        return feed;\\n    }\\n}\\n\",\"keccak256\":\"0xf29d7552bfc7ea3ca47532bffa7dadf66f891db0c99fabe13bae2fcd788f308a\"},\"contracts/price-feed/price-feed.sol\":{\"content\":\"/// price-feed.sol - ds-value like that also pokes a medianizer\\n\\n// Copyright (C) 2017, 2018  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.4.23;\\n\\nimport \\\"../lib/thing.sol\\\";\\n\\ninterface Medianizer {\\n    function poke() external;\\n}\\n\\ncontract PriceFeed is DSThing {\\n\\n    uint128       val;\\n    uint32 public zzz;\\n\\n    function peek() external view returns (bytes32,bool)\\n    {\\n        return (bytes32(val), now < zzz);\\n    }\\n\\n    function read() external view returns (bytes32)\\n    {\\n        require(now < zzz);\\n        return bytes32(val);\\n    }\\n\\n    function poke(uint128 val_, uint32 zzz_) external note auth\\n    {\\n        val = val_;\\n        zzz = zzz_;\\n    }\\n\\n    function post(uint128 val_, uint32 zzz_, Medianizer med_) external note auth\\n    {\\n        val = val_;\\n        zzz = zzz_;\\n        med_.poke();\\n    }\\n\\n    function void() external note auth\\n    {\\n        zzz = 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa4c58ccdf9ad27de9a913eaf3db838910e07e00e5a8b80011297bc67e2c8ed28\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c74806100206000396000f30060806040526004361061004b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e58fdd048114610050578063efc81a8c14610092575b600080fd5b34801561005c57600080fd5b5061007e73ffffffffffffffffffffffffffffffffffffffff600435166100d0565b604080519115158252519081900360200190f35b34801561009e57600080fd5b506100a76100e5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60006020819052908152604090205460ff1681565b6000806100f0610233565b604051809103906000f08015801561010c573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff83168152905191925033917f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c9181900360200190a2604080517f13af4035000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff8316916313af403591602480830192600092919082900301818387803b1580156101c857600080fd5b505af11580156101dc573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550905090565b604051610a05806102448339019056006080604081905260018054600160a060020a03191633908117909155907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26109b4806100516000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313af403581146100a857806350ed2a2c146100d857806357de26a41461010b57806359e02dd7146101325780635a686699146101605780637a9e5e4b146101ac5780638da5cb5b146101da578063a4dff0a214610218578063ac4c25b214610246578063bf7e214f1461025b575b600080fd5b3480156100b457600080fd5b506100d673ffffffffffffffffffffffffffffffffffffffff60043516610270565b005b3480156100e457600080fd5b506100d66fffffffffffffffffffffffffffffffff6004351663ffffffff6024351661031e565b34801561011757600080fd5b50610120610447565b60408051918252519081900360200190f35b34801561013e57600080fd5b5061014761048b565b6040805192835290151560208301528051918290030190f35b34801561016c57600080fd5b506100d66fffffffffffffffffffffffffffffffff6004351663ffffffff6024351673ffffffffffffffffffffffffffffffffffffffff604435166104c2565b3480156101b857600080fd5b506100d673ffffffffffffffffffffffffffffffffffffffff60043516610663565b3480156101e657600080fd5b506101ef61070d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561022457600080fd5b5061022d610729565b6040805163ffffffff9092168252519081900360200190f35b34801561025257600080fd5b506100d6610749565b34801561026757600080fd5b506101ef610817565b61029e336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b15156102a957600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a46103b5336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b15156103c057600080fd5b50506002805463ffffffff909216700100000000000000000000000000000000027fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff9094167fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169290921792909216179055565b600254600090700100000000000000000000000000000000900463ffffffff16421061047257600080fd5b506002546fffffffffffffffffffffffffffffffff1690565b6002546fffffffffffffffffffffffffffffffff81169170010000000000000000000000000000000090910463ffffffff16421090565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a4610559336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b151561056457600080fd5b600280547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8716177fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000063ffffffff871602179055604080517f18178358000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff851691631817835891600480830192600092919082900301818387803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050505050505050565b610691336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b151561069c57600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600254700100000000000000000000000000000000900463ffffffff1681565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a46107e0336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b15156107eb57600080fd5b5050600280547fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff169055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff831630141561085b57506001610982565b60015473ffffffffffffffffffffffffffffffffffffffff8481169116141561088657506001610982565b60005473ffffffffffffffffffffffffffffffffffffffff1615156108ad57506000610982565b60008054604080517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506040513d602081101561097d57600080fd5b505190505b929150505600a165627a7a72305820f49369329ce216fe849b5318a4969f9f7427a7b2f773297622edaf22e71557e40029a165627a7a72305820cb842261ae36150a418b5d5f77fc2b55f179418a85a9c69f0ccb441c89bd4f0e0029",
  "deployedBytecode": "0x60806040526004361061004b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e58fdd048114610050578063efc81a8c14610092575b600080fd5b34801561005c57600080fd5b5061007e73ffffffffffffffffffffffffffffffffffffffff600435166100d0565b604080519115158252519081900360200190f35b34801561009e57600080fd5b506100a76100e5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60006020819052908152604090205460ff1681565b6000806100f0610233565b604051809103906000f08015801561010c573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff83168152905191925033917f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c9181900360200190a2604080517f13af4035000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff8316916313af403591602480830192600092919082900301818387803b1580156101c857600080fd5b505af11580156101dc573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550905090565b604051610a05806102448339019056006080604081905260018054600160a060020a03191633908117909155907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26109b4806100516000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313af403581146100a857806350ed2a2c146100d857806357de26a41461010b57806359e02dd7146101325780635a686699146101605780637a9e5e4b146101ac5780638da5cb5b146101da578063a4dff0a214610218578063ac4c25b214610246578063bf7e214f1461025b575b600080fd5b3480156100b457600080fd5b506100d673ffffffffffffffffffffffffffffffffffffffff60043516610270565b005b3480156100e457600080fd5b506100d66fffffffffffffffffffffffffffffffff6004351663ffffffff6024351661031e565b34801561011757600080fd5b50610120610447565b60408051918252519081900360200190f35b34801561013e57600080fd5b5061014761048b565b6040805192835290151560208301528051918290030190f35b34801561016c57600080fd5b506100d66fffffffffffffffffffffffffffffffff6004351663ffffffff6024351673ffffffffffffffffffffffffffffffffffffffff604435166104c2565b3480156101b857600080fd5b506100d673ffffffffffffffffffffffffffffffffffffffff60043516610663565b3480156101e657600080fd5b506101ef61070d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561022457600080fd5b5061022d610729565b6040805163ffffffff9092168252519081900360200190f35b34801561025257600080fd5b506100d6610749565b34801561026757600080fd5b506101ef610817565b61029e336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b15156102a957600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a46103b5336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b15156103c057600080fd5b50506002805463ffffffff909216700100000000000000000000000000000000027fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff9094167fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169290921792909216179055565b600254600090700100000000000000000000000000000000900463ffffffff16421061047257600080fd5b506002546fffffffffffffffffffffffffffffffff1690565b6002546fffffffffffffffffffffffffffffffff81169170010000000000000000000000000000000090910463ffffffff16421090565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a4610559336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b151561056457600080fd5b600280547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8716177fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000063ffffffff871602179055604080517f18178358000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff851691631817835891600480830192600092919082900301818387803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050505050505050565b610691336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b151561069c57600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600254700100000000000000000000000000000000900463ffffffff1681565b604080513480825260208201838152369383018490526004359360243593849386933393600080357fffffffff0000000000000000000000000000000000000000000000000000000016949092606082018484808284376040519201829003965090945050505050a46107e0336000357fffffffff0000000000000000000000000000000000000000000000000000000016610833565b15156107eb57600080fd5b5050600280547fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff169055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff831630141561085b57506001610982565b60015473ffffffffffffffffffffffffffffffffffffffff8481169116141561088657506001610982565b60005473ffffffffffffffffffffffffffffffffffffffff1615156108ad57506000610982565b60008054604080517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b505050506040513d602081101561097d57600080fd5b505190505b929150505600a165627a7a72305820f49369329ce216fe849b5318a4969f9f7427a7b2f773297622edaf22e71557e40029a165627a7a72305820cb842261ae36150a418b5d5f77fc2b55f179418a85a9c69f0ccb441c89bd4f0e0029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}